import java.util.*;

public class PlayerImpl implements Player {
	// Identifies the player
	private int name = 0;
	int n = 0;
	double alpha;
	double beta;

	// Constructor
	public PlayerImpl(int name, int n) {
		this.name = 0;
		this.n = n;
	}

	public boolean contains(int[] haystack, int needle){ 
		for (int h : haystack) 
			if (h == needle)
				return true; 
		return false; 
	}
	// Function to find possible successors
	@Override
	public ArrayList<Integer> generateSuccessors(int lastMove, int[] crossedList) {
		// TODO Add your code here
		ArrayList<Integer> successors = new ArrayList<Integer>();
		GameState parent=new GameState(crossedList, lastMove);
		if (lastMove==-1){
			for (int i=1; i<=n/2; i++)
				successors.set(i, i);
		    return successors;
		}
		int numChildren=crossedList.length;
		for(int factor = 1; factor <= lastMove; factor++ ){
		    if(lastMove % factor == 0)
		    	if (!crossedList.){
		        successors.add(factor);
		    } 
		}
		 int i=1;  
		 while (i*lastMove<n){
			if ( !successors.contains(i*lastMove) ) {
				successors.add(i*lastMove);
                i++;
			}
		 }
		return successors;
	}

	// The max value function
	@Override
	public int max_value(GameState s) {
		// TODO Add your code here
		int alpha;
		ArrayList<Integer> successors = new ArrayList<Integer>();
        if (s.leaf==true)
        	return -1;
        else if (s.crossedList.length==0)
        	return -1;
        else {
        	alpha=Integer.MIN_VALUE; //alpha=-inf
        	successors=generateSuccessors(s.lastMove, s.crossedList);
        	int size=successors.size();
        	for (int i=0; i<size ;i++){
    			s.crossedList[i]=successors.get(i);
        	//for (Integer successor : successors){
    			//how to update lastMove?
    			//α := max( α , Min-value(s’))
    			alpha=Math.max(alpha, min_value(s));//right?
        	}
        }
        return alpha;
	}

	// The min value function
	@Override
	public int min_value(GameState s) {
		// TODO Add your code here
        int beta;
        ArrayList<Integer> successors= new ArrayList<Integer>();
        if (s.leaf==true)
        	return -1;
        else if (s.crossedList.length==0){
        	return -1;
        }
        else{
        	beta= Integer.MAX_VALUE; //beta=inf
        	successors=generateSuccessors(s.lastMove, s.crossedList);
        	int size=successors.size();
        	for (int i=0; i<size ;i++){
    			s.crossedList[i]=successors.get(i);
        	//for (Integer successor : successors){
    			//how to update lastMove?
    			  //β := min( β , Max-value(s’))
        		beta=Math.min(beta, max_value(s));//right?
        	}
        }
		return beta;
	}

	// Function to find the next best move
	@Override
	public int move(int lastMove, int[] crossedList) {
		// TODO Add your code here
		int depth=1; //do we start the depth from 0 or 1?
		GameState state=new GameState(crossedList,lastMove);
		Double maxValue= Double.NEGATIVE_INFINITY;
		int tmpMaxValue=0;
		//Double minValue= Double.POSITIVE_INFINITY;
		//int tmpMinValue=0;
		boolean done=false;
		if (crossedList.length==0)
			return -1;
		while (done==false){
			/*
			tmpMinValue=this.min_value(state);
			if  (tmpMinValue < minValue){
				minValue=(double) tmpMinValue;
			} 
			*/
			//Whenever a player decides on the next best move,
			//he considers himself as the max player
			if (crossedList.length==0)
				done=true;
			
			tmpMaxValue=this.max_value(state);
			if (tmpMaxValue > maxValue){
				maxValue=(double) tmpMaxValue;
			}
			depth++;
		}
		return maxValue.intValue();
	}
}